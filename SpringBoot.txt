​	

#  SpringBoot

## 创建一个全新Boot工程

### 1 选择Spring Initializr项目

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104103914642.png" alt="image-20230104103914642" style="zoom:80%;" />

### 2 选择Spring Web框架

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104104014217.png" alt="image-20230104104014217" style="zoom: 80%;" />

## 隐藏文件

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104114559117.png" alt="image-20230104114559117" style="zoom: 67%;" />

![image-20230104114606596](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104114606596.png)



<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104213825585.png" alt="image-20230104213825585" style="zoom:80%;" />

```xml
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        // 修改版本
        <version>2.7.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
	<properties>
        <java.version>8</java.version>
    </properties>
```



## SpringBoot程序优点

* 起步依赖（简化依赖设置）
* 自动配置（简化常用工程配置）
* 辅助功能（内置服务器,....）

### Parent

```xml
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.3</version>
        <relativePath/> <!-- lookup parent from repository -->
</parent>
```

**使用parent进行统一管理配置这个版本信息**

使用<dependencyManagement></dependencyManagement>进行共同管理

### Starter

**starter技术使管理依赖变得简单，将依赖集中管理，减少依赖配置**

### 引导类

SpringBoot自动生成一个引导类，生成一个容器，加载容器

```java
@SpringBootApplication
public class SpringBoot01Application {
    
    public static void main(String[] args) {
        
        SpringApplication.run(SpringBoot01Application.class, args);
        
        ctx.getBean();
    }
}
```

**可以获取同层目录下的Bean**

## 基本配置

### 属性配置

简单配置服务器端口

![image-20230104151503927](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104151503927.png)

```java
#服务器端口
server.port=80
```

### 基础配备

**可以控制文本，图像显示，控制console打印信息的输出**

### SpringBoot配置格式

* properties
* yml
* yaml

### 将ymal文件加入

![image-20230104160950229](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104160950229.png)

![image-20230104161011850](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104161011850.png)

![image-20230104161020454](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104161020454.png)

## 读取yaml文件

```yaml
name:
  张三

likes:
  - rap
  - jump
  - sleep
```

```java
package com.example.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @ClassName BookController
 * @Description TODO
 * @Author Typecoh
 * @Date 2022/9/4 23:09
 * @Version 1.0
 */

@RestController
@RequestMapping("/Books")

public class BookController {
    
    @Value("${name}")
    private String name;
    @Value("${likes[0]}")
    private String habby1;
    
    @GetMapping("/{id}")
    public String getById(@PathVariable int id){
    
        System.out.println("id == >" + id);
    
        System.out.println("name==>" + name);
        System.out.println("habby1==>" + habby1);
        
        return "get is running...";
    }
}
```

在ymal使用中间变量传递

```ymal
dir: c://win
  
dirfile: ${dir}//test
```

```java
@Autowired
private Environment environment;

// 自动将数据全部封装在 Environment
//使用getProperty获取value
System.out.println(environment.getProperty("dir"));
```

### 创建MyDataSource

```java
package com.example;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

/**
 * @ClassName MyDataSource
 * @Description TODO
 * @Author Typecoh
 * @Date 2023/1/4 20:50
 * @Version 1.0
 */

//定义成一个Bean
@Component
//指定数据加载
@ConfigurationProperties("datasource")
// 封装yaml文件数据
public class MyDataSource {
    
    private String driver;
    private String username;
    private String password;
    private String url;
    
    @Override
    public String toString() {
        return "MyDataSource{" +
                "driver='" + driver + '\'' +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                ", url='" + url + '\'' +
                '}';
    }
    
    public String getDriver() {
        return driver;
    }
    
    public void setDriver(String driver) {
        this.driver = driver;
    }
    
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    
    public String getUrl() {
        return url;
    }
    
    public void setUrl(String url) {
        this.url = url;
    }
}
```

```yaml
datasource:
  username: Typecoh
  password: 123456
  url: jdbc:mysql://localhost:3306//Books
  driver: com.mysql.jdbc.Driver
```

​	

## SpringBoot整合第三方技术

### 整合Juint

#### 1 导入测试对应的starter

**Maven自动装配好了**

#### 2 测试类使用@SpringBootTest修饰

#### 3 使用自动装配的形式添加要测试的对象

```java
package com.itheima.juint;

import com.itheima.dao.BookDao;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class JuintApplicationTests {
    
    // 自动装配 创建的 BookDaoImpl对象装配到BookDao中
    @Autowired
    private BookDao bookDao;
    
    @Test
    void contextLoads() {
    
        System.out.println(bookDao);
        bookDao.save();
    }
}

```

![image-20230104215516259](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104215516259.png)

### 整合Mybatis

#### 创建一个新工程

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104220431730.png" alt="image-20230104220431730" style="zoom:67%;" />

![image-20230104223240988](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230104223240988.png)

#### 创建文件

```java
package com.itheima.dao;

import com.itheima.domain.Book;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;

/**
 * @ClassName
 * @Description TODO
 * @Author lenovo
 * @Date 2023/1/4 22:35
 * @Version 1.0
 */
//添加Mapper注释
@Mapper
public interface BookDao {

    @Select("select * from book where id = #{id}")
    public Book GetById(Integer id);
}
```

```java
package com.itheima.domain;

/**
 * @ClassName Book
 * @Description TODO
 * @Author Typecoh
 * @Date 2023/1/4 22:37
 * @Version 1.0
 */

public class Book {
    
    public String id;
    public String type;
    public String name;
    public String description;
    
    @Override
    public String toString() {
        return "Book{" +
                "id='" + id + '\'' +
                ", type='" + type + '\'' +
                ", name='" + name + '\'' +
                ", description='" + description + '\'' +
                '}';
    }
    
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getType() {
        return type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
}
```

```yaml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mybatis
    password: 123456
    username: Typecoh
    driver-class-name: com.mysql.jdbc.Driver
```

**创建好了之后需要先造好datasource，否则测试报错**



### 整合Druid

#### 1 创建新文件

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230105113152239.png" alt="image-20230105113152239" style="zoom:80%;" />

#### 2 导入指定的坐标

```java
<dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>druid-spring-boot-starter</artifactId>
    <version>1.2.3</version>
</dependency>
```

#### 3 Druid数据配置

* 方式一

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    username: Typecoh
    password: 123456
    url: jdbc:mysql://localhost:3306/mybatis
    type: com.alibaba.druid.pool.DruidDataSource
```

* 方式二

  ```yaml
  spring:
    datasource:
      druid:
        driver-class-name: com.mysql.jdbc.Driver
        username: Typecoh
        password: 123456
        url: jdbc:mysql://localhost:3306/mybatis
  ```

  

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230105163614540.png" alt="image-20230105163614540" style="zoom:80%;" />

### 配置lombok

#### 配置版本

```xml
        <!--导入lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
```

#### 使用@Data注解

```java
//使用@Data替代 Getter Setter方法 toString方法
@Data
public class Book {
    
    public String id;
    public String type;
    public String name;
    public String description;
}
```

### 开启日志文件

```yaml
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
```

![image-20230105191518467](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230105191518467.png)



## 多环境开发

yaml书写格式

```yaml
spring:
  profiles:
    active: test
---
spring:
  profiles: pro
server:
  port: 8080

---
spring:
  profiles: dev
server:
  port: 8081
  
---
spring:
  profiles: test
server:
  port: 8082


```

将文件打成jar包使用nmp执行

![image-20230106193355521](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230106193355521.png)

```npm
java -jar SpringBoot_01-0.0.1-SNAPSHOT.jar
```

![image-20230106200844240](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230106200844240.png)

npm修改运行种类

![image-20230106201025175](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230106201025175.png)

```
java -jar SpringBoot_01-0.0.1-SNAPSHOT.jar --server.port=8085
```

修改临时端口

![image-20230106201252384](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230106201252384.png)

![image-20230107093056656](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107093056656.png)

## 配置高级

修改临时属性

```java
@SpringBootApplication
public class Package1Application {
    
    public static void main(String[] args) {
        
        String []arg = new String[1];
        arg[0] = "--server.port=8088";
        
        SpringApplication.run(Package1Application.class, arg);
    }
    
}
```

拦截临时属性

```java
public class Package1Application {
    
    public static void main(String[] args) {
        
        // String []arg = new String[1];
        // arg[0] = "--server.port=8088";
        
        SpringApplication.run(Package1Application.class);
    }
    
}
```

创建config文件夹覆盖原来文件

![image-20230107094847855](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107094847855.png)

```yaml
spring:
  datasource:
    username: Typecoh
    password: 123456
    url: jdbc:mysql://localhost:3306/mybatis
    driver-class-name: com.mysql.jdbc.Driver
server:
  port: 8083
```

![image-20230107094909146](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107094909146.png)

Maven和SpringBoot结合

<img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107102335990.png" alt="image-20230107102335990" style="zoom:80%;" />



```yaml
  profiles:
    active: @profile.active@
    group: 
      "dev": devDB,devMVC
      "pro": proDB,proMVC

server:
  port: 80
  
```

![image-20230107103320601](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107103320601.png)



配置pom文件

```xml
<!--设置启动环境-->
<profiles>
    <profile>
        <id>env_pro</id>
        <properties>
            <profile.active>pro</profile.active>
        </properties>
        <!--<activation>-->
        <!--    <activeByDefault>true</activeByDefault>-->
        <!--</activation>-->
    </profile>
    <profile>
        <id>env_dev</id>
        <properties>
            <profile.active>dev</profile.active>
        </properties>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
    </profile>
</profiles>
```

![image-20230107103227626](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107103227626.png)



```xml
<!--设置启动环境-->
<profiles>
    <profile>
        <id>env_pro</id>
        <properties>
            <profile.active>pro</profile.active>
        </properties>
        <!--<activation>-->
        <!--    <activeByDefault>true</activeByDefault>-->
        <!--</activation>-->
    </profile>
    <profile>
        <id>env_dev</id>
        <properties>
            <profile.active>dev</profile.active>
        </properties>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
    </profile>
</profiles>
```

![image-20230107103506996](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230107103506996.png)



## 日志配置

```yaml
debug: true // 开启debug 可以不开启

logging:
  level: 
    root: info
```

```yaml
logging:
#  设置分组
  group:
    ebank: com.itheima.controller,com.itheima.service
    
  level:
    root: info
#    将组内设置信息
    ebank: info
```

使用lombok记录日志

```xml
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
</dependency>
```

```java
@Slf4j
@RestController
@RequestMapping("/Book")
public class controller {
    
    @GetMapping    
    public String say(){
        
        log.warn("warn~~~~~");
        return "SpringBoot~~";
    }
}
```

设置日志格式输出

```yaml
logging:
  pattern:
    console: "%d -%m %n"
```

